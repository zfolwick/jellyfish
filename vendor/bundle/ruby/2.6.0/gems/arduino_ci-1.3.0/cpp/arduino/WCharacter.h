#pragma once

inline bool isAlpha(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0x0000, 0x0000,
    0xfffe, 0x07ff, 0xfffe, 0x07ff,
    0x0000, 0x0000, 0x0000, 0x0000,
    0xffff, 0xff7f, 0xffff, 0xff7f  };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isDigit(int c) {
  return '0' <= c && c <= '9';
}

inline bool isAlphaNumeric(unsigned char c) {
  return isAlpha(c) || isDigit(c);
}

inline bool isAscii(int c) {
  return ((unsigned char)(c)) <= 0x7f;
}

inline bool isControl(int c) {
  unsigned int data[16] = {
    0xffff, 0xffff, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x8000,
    0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000 };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isGraph(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0xfffe, 0xffff,
    0xffff, 0xffff, 0xffff, 0x7fff,
    0x0000, 0x0000, 0xfffe, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isHexadecimalDigit(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0x0000, 0x03ff,
    0x007e, 0x0000, 0x007e, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000 };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isLowerCase(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0xfffe, 0x07ff,
    0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x8000, 0xffff, 0xff7f };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isPrintable(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0x7fff,
    0x0000, 0x0000, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isPunct(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0xfffe, 0xfc00,
    0x0001, 0xf800, 0x0001, 0x7800,
    0x0000, 0x0000, 0xfffe, 0xffff,
    0x0000, 0x0080, 0x0000, 0x0080 };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isSpace(int c) {
  unsigned int data[16] = {
    0x3e00, 0x0000, 0x0001, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0001, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000 };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isUpperCase(int c) {
  unsigned int data[16] = {
    0x0000, 0x0000, 0x0000, 0x0000,
    0xfffe, 0x07ff, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000,
    0xffff, 0x7f7f, 0x0000, 0x0000 };
  return data[c / 16] & (1 << (c % 16));
}

inline bool isWhitespace(int c) { return c == ' ' || c == '\t' || isSpace(c); }
